{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../Navbar.svelte",
    "../../Jumbotron.svelte",
    "../../Sections.svelte",
    "../../News.svelte",
    "../../Subpage.svelte",
    "../../SubpageMd.svelte",
    "../../Footer.svelte"
  ],
  "sourcesContent": [
    "<script>\n    import { onMount } from 'svelte';\n    import { createEventDispatcher } from 'svelte';\n    const dispatch = createEventDispatcher();\n\n    export let path;\n    export let homePath;\n    export let languages;\n    export let language;\n    export let defaultLanguage;\n\n    let navlist =\n    {\n        \"title\": \"\",\n        \"logo\": \"\",\n        \"elements\": [\n            { url: \"/\", label: { en: \"Home\", pl: \"Home\" }, target: \"\" }\n\n        ]\n    };\n    onMount(async () => {\n        navlist =  await contentClient.getJsonFile(`navigation.json`);\n        document.title = navlist.title;\n    });\n    function handleLang(x) {\n        dispatch('setLanguage', {\n            language: x\n        })\n    }\n\n</script>\n\n<nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div class=\"container\">\n        {#if !(path===homePath || path===homePath+'index.html')}\n        <img class=\"mr-auto\" src=\"{navlist.logo}\" alt=\"logo\">\n        {/if}\n        <button class=\"navbar-toggler ml-auto\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\n            <ul class=\"navbar-nav ml-auto\">\n                {#each navlist.elements as element}\n                <a class=\"nav-item nav-link ml-auto mycolor\" \n                   href={element.url==='/'?homePath:element.url} \n                   target={element.target}>{element.label[language]}</a>\n                {/each}\n                {#if languages.length>1}\n                {#each languages as lang}\n                {#if lang!==language}\n                    <a class=\"nav-item nav-link ml-auto mycolor\" \n                    on:click={() => handleLang(lang)}><img class=\"flag\" alt={lang} src={'resources/flags/'+lang+'.svg'}></a>\n                {/if}\n                {/each}\n                {/if}\n            </ul>\n\n        </div>\n    </div>\n</nav>\n<style>\n    nav img{\n        width: 125px;\n    }\n    a.nav-item{\n        font-size: large;\n    }\n    .flag{\n        width: 1.6rem; \n        border-width: 1px; \n        border-color: lightgray;\n        border-style: solid;\n    }\n</style>",
    "<script>\n    export let homePath;\n    let bgImgLocation=homePath+'resources/jumbotron.png';\n</script>\n\n<div class=\"jumbotron\" style=\"background-image: linear-gradient(to bottom, rgba(255,255,255,0.7) 0%,rgba(255,255,255,0.5) 100%), url({bgImgLocation})\">\n    <div class=\"container text-center\" style=\"padding:3rem;\">\n        <img src=\"resources/new_logo_horizontal_v3.svg\" alt=\"logo\" class = \"logo_img\">\n    </div>\n</div>\n\n<style>\n    .logo_img{\n        width: 40%;\n        align-content: center;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n\n    export let folder;\n    export let language;\n    export let defaultLanguage;\n    export let iconType;\n    let prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n    let index = [{ \"name\": \"\" }]\n    let bgcolor = \"white\"\n\n    onMount(async () => {\n        loadContent()\n    });\n    async function loadContent() {\n        // get articles\n        try {\n            index = await contentClient.getJsonFile(prefix + folder + '/index.json');\n        } catch (err) {\n            console.log(err)\n            index = []\n        }\n        var parser = new DOMParser();\n        for (var i = 0; i < index.length; i++) {\n            index[i].content = await contentClient.getTextFile(prefix + folder + '/' + index[i].name);\n            index[i].icon = prefix + folder + '/' + index[i].name.substring(0, index[i].name.lastIndexOf('.')) + '.' + iconType;\n            var doc = parser.parseFromString(index[i].content, \"text/html\");\n            try {\n                index[i].title = doc.querySelector('article header title').innerHTML;\n            } catch (ex) {\n                index[i].title = index[i].name;\n            }\n        }\n    }\n    export function languageChanged(newLanguage) {\n        language = newLanguage;\n        prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n        loadContent();\n    }\n</script>\n{#each index as {name, title, content, icon}, idx}\n<div class=\"section\" style=\"padding-top: 2rem; padding-bottom: 2rem;\">\n    <div class=\"container\">\n        <center>\n            <h2><img src=\"{icon}\" width=\"50px;\" alt=\"{title}\" style=\"margin-bottom: 1rem;\" /><br />{title}</h2>\n        </center>\n        <hr>\n    </div>\n    <div class=\"container\">\n        {@html content}\n    </div>\n</div>\n{/each}\n<style>\n    hr {\n        color: lightgray !important;\n        border: solid 1px !important;\n        height: 0px !important;\n    }\n    .section:nth-child(even) {\n        background-color: #F8F8F8;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n\n    export let folder;\n    export let language;\n    export let defaultLanguage;\n    export let homePath;\n    let prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n\n    let config = {\n        \"title\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        },\n        \"email\": \"\",\n        \"siteUrl\": \"\",\n        \"disclaimer\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        },\n        \"prompt\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        },\n        \"link\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        },\n        \"comments\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        },\n        \"send\": {\n            \"pl\": \"\",\n            \"en\": \"\"\n        }\n    }\n    let index = [{ \"uid\": \"\", \"name\": \"\", \"isComment\": false, \"comments\": [] }]\n    let bgImgLocation;\n    let commentDisclaimer = '';\n    // commentsForOneArticle = [{email: \"x@y\", date: \"2020-03-21\", text: \"mój komentarz\"}, {email: \"aa@bb.cc\", date: \"2020-03-22\", text: \"mój 2 komentarz\"}];\n\n    onMount(async () => {\n        bgImgLocation = homePath + 'resources/jumbotron.png';\n        loadContent()\n    });\n    async function loadContent() {\n        // get news config\n        try {\n            config = await contentClient.getJsonFile(prefix + folder + '/config.json');\n        } catch (err) {\n            index = []\n            return\n        }\n        commentDisclaimer = '%0D%0A%0D%0A' + encodeURI(config.disclaimer[language]);\n        // get articles\n        try {\n            index = await contentClient.getJsonFile(prefix + folder + '/index.json');\n        } catch (err) {\n            index = []\n        }\n        let cnt;\n        let cmt;\n        for (var i = 0; i < index.length; i++) {\n            index[i].uid = index[i].name.substring(0, index[i].name.lastIndexOf('.'))\n            index[i].content = await contentClient.getTextFile(prefix + folder + '/' + index[i].name);\n            if (index[i].isComment) {\n                index[i].comments = await contentClient.getJsonFile(prefix + folder + '/' + index[i].uid + '.json');\n            } else {\n                index[i].comments = [];\n            }\n        }\n        index = index;\n    }\n    function getLength(arr) {\n        let l = 0;\n        try {\n            l = arr.length;\n        } catch{\n\n        }\n        return l;\n    }\n    export function languageChanged(newLanguage) {\n        language = newLanguage;\n        prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n        loadContent();\n    }\n</script>\n<div\n    style=\"background-image: linear-gradient(to bottom, rgba(255,255,255,0.9) 0%,rgba(255,255,255,0.7) 100%), url({bgImgLocation})\">\n    <div class=\"container text-center\">\n        <h1 class=\"title\">{config.title[language]}</h1>\n    </div>\n</div>\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-3 text-center\">\n            <img src={prefix+folder+'/icon.png'} class=\"subpage_img\">\n        </div>\n        <div class=\"col-md-9\">\n            {#each index as {uid, name, content, comments}, idx}\n            <div class=\"container\">\n                <a id=\"{uid}\"></a>\n                {@html content}\n                {#if homePath==='/'}\n                <hr class=\"comments\">\n                <div class=\"row comments\">\n                    <div class=\"col-4\">\n                        <a \n                        class=\"permalink\" \n                        href=\"#{uid}\" \n                        onclick=\"prompt('{config.prompt[language]}','{config.siteUrl}{homePath}{folder}.html#{uid}'); return false;\"\n                        ><img src=\"/resources/link.svg\"/> {config.link[language]}</a>\n                    </div>\n                    <div class=\"col-4\">{config.comments[language]}: {getLength(comments)}</div>\n                    <div class=\"col-4 text-right\">\n                        <a class=\"btn btn-sm btn-outline-secondary\" role=\"button\" \n                           href=\"mailto:{config.email}?subject=ID:{uid}&body={commentDisclaimer}\" \n                           target=\"_blank\">{config.send[language]}</a>\n                    </div>\n                </div>\n                {#if getLength(comments)>0}\n                {#each comments as comment}\n                <div class=\"row comment-header\">\n                    <div class=\"col-12\">{comment.date} <i>{comment.email}</i></div>\n                </div>\n                <div class=\"row comment\">\n                    <div class=\"col-12\">{comment.text}</div>\n                </div>\n                {/each}\n                {/if}\n                {/if}\n            </div>\n            {/each}\n        </div>\n    </div>\n</div>\n\n<style>\n    hr.comments {\n        color: lightgray !important;\n        border: dotted 1px !important;\n        height: 0px !important;\n    }\n    .title{\n        padding-top: 2rem;\n        padding-bottom: 2rem;\n        margin-bottom: 2rem;\n    }\n    .subpage_img {\n        max-height:100px;\n        max-width:222px;\n        margin-bottom: 2rem;\n    }\n    a.permalink{\n        color: black;\n    }\n    a.permalink:hover{\n        text-decoration: none;\n    }\n    div.comments{\n        margin-bottom: 1rem;\n    }\n    div.comment-header{\n        font-size: small;\n    }\n    div.comment{\n        font-size: small;\n        margin-bottom: 0.7rem;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n\n    export let name;\n    export let language;\n    export let defaultLanguage;\n    export let homePath;\n\n    let title = 'title';\n    let content = '';\n    let prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n    let bgImgLocation = homePath + 'resources/jumbotron.png';\n\n    onMount(async () => {\n        loadContent();\n    });\n    async function loadContent() {\n        content = await contentClient.getTextFile(prefix + 'subpages/' + name + '.html');\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(content, \"text/html\");\n        try {\n            title = doc.querySelector('article header title').innerHTML;\n        } catch (ex) {\n            title = name;\n        }\n    }\n    export function languageChanged(newLanguage) {\n        language = newLanguage;\n        prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n        loadContent();\n    }\n</script>\n<div\n    style=\"background-image: linear-gradient(to bottom, rgba(255,255,255,0.9) 0%,rgba(255,255,255,0.7) 100%), url({bgImgLocation})\">\n    <div class=\"container text-center\">\n        <h1 class=\"title\">{title}</h1>\n    </div>\n</div>\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-3 text-center\">\n            <img src={'content/subpages/'+name+'.png'} class=\"subpage_img\">\n        </div>\n        <div class=\"col-md-9\">\n            {@html content}\n        </div>\n    </div>\n</div>\n\n<style>\n    hr {\n        color: lightgray !important;\n        border: solid 1px !important;\n        height: 0px !important;\n    }\n\n    .title {\n        padding-top: 2rem;\n        padding-bottom: 2rem;\n        margin-bottom: 2rem;\n    }\n\n    .subpage_img {\n        max-height: 100px;\n        max-width: 222px;\n        margin-bottom: 2rem;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n\n    export let name;\n    export let language;\n    export let defaultLanguage;\n    export let homePath;\n\n    const classMap = {\n        table: 'table-bordered table-sm',\n        blockquote: 'blockquote'\n    }\n    const bindings = Object.keys(classMap)\n            .map(key => ({\n                    type: 'output',\n                    regex: new RegExp(`<${key}(.*)>`, 'g'),\n                    replace: `<${key} class=\"${classMap[key]}\" $1>`\n                }));\n\n    let title = 'title';\n    let published = '';\n    let content = '';\n    let prefix = 'content/' + (language === defaultLanguage ? '' : language + '_');\n    let bgImgLocation = homePath + 'resources/jumbotron.png';\n    let converter = new showdown.Converter(\n            {\n                tables: true,\n                simpleLineBreaks: true,\n                simplifiedAutoLink: true,\n                extensions: [...bindings]\n            }\n    );\n\n    onMount(async () => {\n        loadContent();\n    });\n    async function loadContent() {\n        content = await contentClient.getTextFile(prefix + 'subpages/' + name + '.md');\n        if (content.startsWith('# ')) {\n            title = content.substring(2, content.indexOf('## '))\n            if (title.indexOf('//') > 0) {\n                published = title.substring(title.indexOf('//') + 2).trim()\n                title = title.substring(0, title.indexOf('//')).trim()\n            }\n            content = content.substring(content.indexOf('## '))\n        }\n        content = converter.makeHtml(content);\n    }\n    export function languageChanged(newLanguage) {\n        language = newLanguage;\n        prefix = 'content/' + (language === defaultLanguage ? '' : language + '_');\n        loadContent();\n    }\n</script>\n<div\n    style=\"background-image: linear-gradient(to bottom, rgba(255,255,255,0.9) 0%,rgba(255,255,255,0.7) 100%), url({bgImgLocation})\">\n    <div class=\"container text-center\">\n        <h1 class=\"title\">{title}</h1>\n    </div>\n</div>\n<div class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-md-3 text-center\">\n            <img src={'content/subpages/'+name+'.png'} class=\"subpage_img\">\n        </div>\n        <div class=\"col-md-9\">\n            {@html content}\n        </div>\n    </div>\n</div>\n\n<style>\n    .title {\n        padding-top: 2rem;\n        padding-bottom: 2rem;\n        margin-bottom: 2rem;\n    }\n    .subpage_img {\n        max-height: 100px;\n        max-width: 222px;\n        margin-bottom: 2rem;\n    }\n</style>",
    "<script>\n    import { onMount } from 'svelte';\n\n    export let file;\n    export let language;\n    export let defaultLanguage;\n\n    let content = '';\n    let prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n\n    onMount(async () => {\n        loadContent()\n    });\n    async function loadContent() {\n        let res = '';\n        content = await contentClient.getTextFile(prefix + file);\n    }\n    export function languageChanged(newLanguage) {\n        language = newLanguage\n        prefix = 'content/'+(language === defaultLanguage ? '' : language + '_');\n        loadContent();\n    }\n\n</script>\n<div class='jumbotron ft'>\n    <div class='container'>\n        <div class=\"row\" style=\"padding-top: 1rem; padding-bottom: 1rem;\">\n            {@html content}\n        </div>\n    </div>\n</div>\n<style>\n    .ft {\n        margin-top: 2rem;\n        background-color: #404040;\n        color: whitesmoke;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "AA6DI,iBAAG,CAAC,iBAAG,CAAC,AACJ,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,CAAC,qCAAS,CAAC,AACP,SAAS,CAAE,KAAK,AACpB,CAAC,AACD,iCAAK,CAAC,AACF,KAAK,CAAE,MAAM,CACb,YAAY,CAAE,GAAG,CACjB,YAAY,CAAE,SAAS,CACvB,YAAY,CAAE,KAAK,AACvB,CAAC;AC5DD,wBAAS,CAAC,AACN,KAAK,CAAE,GAAG,CACV,aAAa,CAAE,MAAM,AACzB,CAAC;ACuCD,EAAE,eAAC,CAAC,AACA,KAAK,CAAE,SAAS,CAAC,UAAU,CAC3B,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,UAAU,CAC5B,MAAM,CAAE,GAAG,CAAC,UAAU,AAC1B,CAAC,AACD,uBAAQ,WAAW,IAAI,CAAC,AAAC,CAAC,AACtB,gBAAgB,CAAE,OAAO,AAC7B,CAAC;AC+ED,EAAE,SAAS,cAAC,CAAC,AACT,KAAK,CAAE,SAAS,CAAC,UAAU,CAC3B,MAAM,CAAE,MAAM,CAAC,GAAG,CAAC,UAAU,CAC7B,MAAM,CAAE,GAAG,CAAC,UAAU,AAC1B,CAAC,AACD,oBAAM,CAAC,AACH,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,YAAY,cAAC,CAAC,AACV,WAAW,KAAK,CAChB,UAAU,KAAK,CACf,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,CAAC,wBAAU,CAAC,AACR,KAAK,CAAE,KAAK,AAChB,CAAC,AACD,CAAC,wBAAU,MAAM,CAAC,AACd,eAAe,CAAE,IAAI,AACzB,CAAC,AACD,GAAG,uBAAS,CAAC,AACT,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,GAAG,6BAAe,CAAC,AACf,SAAS,CAAE,KAAK,AACpB,CAAC,AACD,GAAG,sBAAQ,CAAC,AACR,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,MAAM,AACzB,CAAC;AClHD,MAAM,cAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,IAAI,AACvB,CAAC,AAED,YAAY,cAAC,CAAC,AACV,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,IAAI,AACvB,CAAC;ACMD,MAAM,eAAC,CAAC,AACJ,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,IAAI,AACvB,CAAC,AACD,YAAY,eAAC,CAAC,AACV,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,IAAI,AACvB,CAAC;ACjDD,GAAG,eAAC,CAAC,AACD,UAAU,CAAE,IAAI,CAChB,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,UAAU,AACrB,CAAC"
}